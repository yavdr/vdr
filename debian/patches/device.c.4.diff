Description: This patch is supposed to fix a deadlock when using a MutexLock
 for channel switching
Author: jrie (http://www.vdr-portal.de/board16-video-disk-recorder/board55-vdr-plugins/p1273527-ring-buffer-overflows-cdevice-detach-blockiert/#post1273527)
--- a/device.c
+++ b/device.c
@@ -1683,7 +1683,8 @@
                        }
                     }
                  // Distribute the packet to all attached receivers:
-                 Lock();
+                 {
+                 cMutexLock MutexLock(&mutexReceiver);
                  for (int i = 0; i < MAXRECEIVERS; i++) {
                      if (receiver[i] && receiver[i]->WantsPid(Pid)) {
                         if (DetachReceivers && cs && (!cs->IsActivating() || receiver[i]->Priority() >= LIVEPRIORITY)) {
@@ -1697,7 +1698,7 @@
                            ChannelCamRelations.SetDecrypt(receiver[i]->ChannelID(), CamSlotNumber);
                         }
                      }
-                 Unlock();
+                   }
                  }
               }
            else
@@ -1739,6 +1740,8 @@
      return false;
      }
 #endif
+  bool breakout = false;
+  {
   cMutexLock MutexLock(&mutexReceiver);
   for (int i = 0; i < MAXRECEIVERS; i++) {
       if (!receiver[i]) {
@@ -1754,16 +1757,23 @@
          Receiver->device = this;
          receiver[i] = Receiver;
          Unlock();
-         if (camSlot && Receiver->priority > MINPRIORITY) { // priority check to avoid an infinite loop with the CAM slot's caPidReceiver
-            camSlot->StartDecrypting();
-            startScrambleDetection = time(NULL);
-            }
-         Start();
-         return true;
+         breakout = true;
+         break; // leave mutexReceiver-block asap
          }
       }
-  esyslog("ERROR: no free receiver slot!");
-  return false;
+  }
+  if (breakout) {
+      if (camSlot && Receiver->priority > MINPRIORITY) { // priority check to avoid an infinite loop with the CAM slot's caPidReceiver
+	    camSlot->StartDecrypting();
+            startScrambleDetection = time(NULL);
+	    }
+      Start(); // has to be outside of mutexReceiver-block
+      return true;
+      }
+  else {
+      esyslog("ERROR: no free receiver slot!");
+      return false;
+      }
 }
 
 void cDevice::Detach(cReceiver *Receiver)
@@ -1773,6 +1783,7 @@
   if (!Receiver || Receiver->device != this)
      return;
   bool receiversLeft = false;
+  {
   cMutexLock MutexLock(&mutexReceiver);
   for (int i = 0; i < MAXRECEIVERS; i++) {
       if (receiver[i] == Receiver) {
@@ -1787,6 +1798,7 @@
       else if (receiver[i])
          receiversLeft = true;
       }
+    } // leave mutexReceiver-block asap
   if (camSlot) {
      if (Receiver->priority > MINPRIORITY) { // priority check to avoid an infinite loop with the CAM slot's caPidReceiver
         camSlot->StartDecrypting();
@@ -1795,7 +1807,7 @@
         }
      }
   if (!receiversLeft)
-     Cancel(-1);
+     Cancel(-1); // has to be outside of mutexReceiver-block
 }
 
 void cDevice::DetachAll(int Pid)
